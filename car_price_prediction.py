# -*- coding: utf-8 -*-
"""Car Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kRIKnSEHjXac_WFSn_YuDkE2lP-v5P4p

Importing the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing"""

#loading data to pandas dataframe
car_dataset=pd.read_csv('/content/cardata.csv')

#Insepecting the first 5 rows
car_dataset.head()

#checking the no of rows and column
car_dataset.shape

car_dataset.info()

#checking the number of missing values
car_dataset.isnull().sum()

#checking the distribution of categorical data in different different values(EX:Seller_type=Dealer and individual)
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorical Data"""

#performing OneHotEncoding on "Fuel_Type" column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

#performing OneHotEncoding on "Seller_Type" column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

#performing OneHotEncoding on "Transmission" column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting the data and Target into Training Data and Test Data"""

#our target is Selling Price,it will be taken as Y(predict)
#drop Selling price in Y and drop car name from car_datset as it is useless fro prediction
X=car_dataset.drop({'Car_Name','Selling_Price'},axis=1)
Y=car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.1,random_state=2)

"""Model Training

1.Linear Regression
"""

#Loading Linear regression model
lin_reg_model=LinearRegression()

#train our model using fit() method
lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#predicting on Training Data(finding Y_train with model)
training_data_prediction=lin_reg_model.predict(X_train)

#comparing the model's ans with original answer i.e., Y_train

# for checking the performance of our model : We use "R square" in "Regressioon problem" and We use "accuracy"  in "classification problem"
#R square Error(from sklearn import metrics)
error_score = metrics.r2_score(Y_train,training_data_prediction)
print("R squared error :", error_score )

"""Visualize the actual price and predicted price"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel(" Actual Price ")
plt.ylabel(" Predicted Price ")
plt.title("actual price vs predicted price")
plt.show()

"""for lower value of predicted price is very close to actual price which is good in terms of  prediction .

Now,do the same thing for test data
"""

#predicting on Test Data(finding Y_test with model) as our model is trianed now
test_data_prediction=lin_reg_model.predict(X_test)

#R square Error(from sklearn import metrics)
error_score = metrics.r2_score(Y_test,test_data_prediction)
print("R squared error :", error_score )

plt.scatter(Y_test,test_data_prediction)
plt.xlabel(" Actual Price ")
plt.ylabel(" Predicted Price ")
plt.title("actual price vs predicted price")
plt.show()

"""2.Lasso Regression"""

#Loading Lasso regression model
lass_reg_model=Lasso()

#train our model using fit() method
lass_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#predicting on Training Data(finding Y_train with model)
training_data_prediction=lass_reg_model.predict(X_train)

#comparing the model's ans with original answer i.e., Y_train

# for checking the performance of our model : We use "R square" in "Regressioon problem" and We use "accuracy"  in "classification problem"
#R square Error(from sklearn import metrics)
error_score = metrics.r2_score(Y_train,training_data_prediction)
print("R squared error :", error_score )

"""Visualize the actual price and predicted price"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel(" Actual Price ")
plt.ylabel(" Predicted Price ")
plt.title("actual price vs predicted price")
plt.show()

"""Values are much closer than Linear Regression

Now,do the same thing for test data
"""

#predicting on Test Data(finding Y_test with model) as our model is trianed now
test_data_prediction=lass_reg_model.predict(X_test)

#R square Error(from sklearn import metrics)
error_score = metrics.r2_score(Y_test,test_data_prediction)
print("R squared error :", error_score )

plt.scatter(Y_test,test_data_prediction)
plt.xlabel(" Actual Price ")
plt.ylabel(" Predicted Price ")
plt.title("actual price vs predicted price")
plt.show()

